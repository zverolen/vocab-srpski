@layer reset, tokens, general.defaults, general.states, specific, theme.light, theme.dark, overrides;

@import url("./styles/reset.css") layer(reset);
@import url("./styles/tokens.css") layer(tokens);
@import url("./styles/defaults.css") layer(general.defaults);


@layer overrides {
  /* Visually hidden elements are visible to screen readers */
  .visually-hidden {
    clip-path: inset(100%);
    clip: rect(1px, 1px, 1px, 1px);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }
}

@media (prefers-color-scheme: light) {
  @layer theme.light {
    :root {
      --text-color: var(--colorPrimary);
      --background-color: var(--colorPrimaryInverted);
      --disabled-background-color: var(--colorDisabledLight);
      
      --correct-text-color: var(--colorSuccess);
      --correct-background-color: var(--colorSuccessInverted);
      --wrong-text-color: var(--colorError);
      --wrong-background-color: var(--colorErrorInverted);
    }
  }
}

@media (prefers-color-scheme: dark) {
  @layer theme.dark {
    :root {
      --text-color: var(--colorPrimaryInverted);
      --background-color: var(--colorPrimary);
      --disabled-background-color: var(--colorDisabledDark);

      --correct-text-color: var(--colorSuccessInverted);
      --correct-background-color: var(--colorSuccess);
      --wrong-text-color: var(--colorErrorInverted);
      --wrong-background-color: var(--colorError);
    }
  }
}

@layer specific {
  button.correct {
    --button-background: var(--correct-background-color);
    --button-border: var(--correct-text-color);
    --button-color: var(--correct-text-color);
    --button-background-activated: var(--correct-text-color);
    --button-color-activated: var(--correct-background-color);
    --border-color: var(var(--correct-text-color));
  }

  .card.wrong:is(div) {
    --button-border: var(--wrong-text-color);
  }

  button.wrong {
    --button-background: var(--wrong-background-color);
    --button-border: var(--wrong-text-color);
    --button-color: var(--wrong-text-color);
    --button-background-activated: var(--wrong-text-color);
    --button-color-activated: var(--wrong-background-color);
  }

  .card.correct:not(.card button) {
    --button-border: var(--correct-text-color);
  }

  
}

/* universal? */
@layer general {

  @layer defaults {
  
    body {
      background-color: var(--background-color);
      color: var(--text-color);
    
      font-family: var(--text-font);
      font-size: var(--text-font-size);
      font-weight: var(--body-font-weight);
    }

    main, footer {
      width: var(--content-width);
      margin-inline: var(--content-margins);
    }
    
    h1, h2, h3 {
      font-family: var(--heading-font);
    }

    h1 {
      margin-bottom: var(--title-gap);

      text-align: var(--heading-text-alignment);
      line-height: var(--heading-line-height);
      text-transform: var(--heading-text-transform);
      letter-spacing: var(--heading-letter-spacing);
      font-size: clamp(24px, 7vw, 44px);
    }

    p:is(.card p) {
      font-size: clamp(18px, 7.2cqw, 22px);
    }

    p:where(:not(.card p)) {
      font-size: clamp(18px, 4vw, 22px);
      line-height: var(--text-line-height);
      font-weight: 400;
    }

    h1 + p {
      text-align: var(--subheading-text-alignment);
      line-height: var(--subheading-line-height);
      font-size: clamp(18px, 5vw, 24px);
      margin-inline: auto;
      text-wrap: pretty;
      width: 71%;
    }

    h2:is(.disclosure h2) {
      margin-bottom: 8px;
    }

    h2:is(footer h2) {
      font-size: var(--subheading-font-size);
      text-transform: var(--heading-text-transform);
      letter-spacing: var(--heading-letter-spacing);
      margin-bottom: var(--footer-heading-margin-bottom);
      margin-top: var(--footer-heading-margin-top);

      font-size: clamp(18px, 4vw, 22px);
    }

    ol {
      padding-left: var(--ordered-list-left-gap);
    }
    
    button {
      min-width: var(--button-min-width);
      background-color: var(--button-background);
      border: var(--borderWidth) solid var(--button-border);
      color: var(--button-color);
  
      font-size: var(--control-font-size);
      padding-inline: var(--button-padding-inline);
      padding-block: var(--button-padding-block);
    }

    /* button:not([role="tab"]) {
      padding-inline: var(--button-padding-inline);
      padding-block: var(--button-padding-block);
    }
   */

    button.withIcon {
      padding-inline: 0;
      border: var(--button-withIcon-border);

      font-family: var(--button-withIcon-font);
      font-size: var(--button-withIcon-font-size);
      text-decoration: var(--button-withIcon-text-decoration);
    }

    button.withIcon span {
      vertical-align: super;
    }

    button.withIcon[aria-expanded]:is(.disclosure button) span::after {
      content: '';
      width: var(--disclosure-control-icon-width);
      height: var(--disclosure-control-icon-height);
      margin-left: var(--disclosure-control-icon-gap);

      background-color: var(--disclosure-control-icon-background);
      clip-path: var(--disclosure-control-icon-shape);
      transform: rotate(var(--disclosure-control-icon-flip));

      vertical-align: middle;
    }

    button.withIcon[aria-expanded="true"]:is(.disclosure button) span::after {
      transform: rotate(var(--disclosure-control-icon-unflip));
    }

    #root {
      gap: var(--root-gap);
    }

    .title {
      margin-top: var(--title-margin-top);
    }

    .content {
      display: var(--site-frame-display);
      flex-direction: var(--site-frame-flex-direction);
      gap: var(--site-frame-gap);
    }

    .instruction {
      margin-block-start: var(--instruction-margin-block);
      margin-block-end: 24px;
    }

    .instruction li {
      font-weight: var(--instruction-font-weight);
    }

    .instruction li p:not(li:last-child p) {
      margin-bottom: 0.44em;
    }

    /* .instruction li p {
      margin-bottom: 0.44em;
    } */

    [role="tablist"] {
      container: tablist / inline-size;
    }

    [role="tablist"] button {
      position: var(--tab-position);
      /* padding-inline: 16px; */
      padding: 6px 8px;

      border-bottom: var(--tab-bottom-border);
    }

    [role="tablist"] button:not(:first-child) {
      margin-inline-start: var(--tab-left-margin);
    }

    [role="tablist"] button:not([aria-selected="true"]) {
      border-width: var(--borderWidthSecondary);
    }

    [role="tablist"] button[aria-selected="true"] {
      /* padding-top: var(--current-tab-gap); */
      padding-top: 10px;
      border-width: 2px;
    }

    [role="tablist"] button[aria-selected="true"]:is(:nth-child(2)) {
      border-color: var(--colorSuccess);
    }

    [role="tablist"] button[aria-selected="true"]:is(:nth-child(3)) {
      border-color: var(--colorError);
    }

    [role="tablist"] button[aria-selected="true"]::after {
      content: '';
      display: var(--tabpanel-concealer-display);

      position: var(--tab-concealer-position);
      left: var(--tab-concealer-left);
      bottom: var(--tab-concealer-bottom);
      z-index: var(--tab-concealer-z-index);

      width: var(--tab-concealer-width);
      height: var(--tab-concealer-height);
      
      background-color: var(--tab-concealer-background);
    }

    [role="tablist"] button > span {
      display: flex;
      align-items: center;
      padding: 2px;

      /* padding-inline: var(--tab-padding-inline);
      padding-block: var(--tab-padding-block); */
    }

    /* [role="tablist"] button[aria-selected="true"] > span {
      border-top: var(--border);
    } */

    [role="tablist"] button > span >span:first-child {
      margin-right: var(--tab-icon-gap);
      font-size: var(--tab-icon-size);
      line-height: var(--tab-icon-line-height);
    }

    @container tablist (width < calc(430 / 16 * 1rem)) {
      [role="tablist"] button > span >span:first-child {
        display: none;
      }
    }

    @container tablist (width < calc(330 / 16 * 1rem)) {
      [role="tablist"] button > span {
        flex-direction: column;
        align-items: flex-start;
      }
    }

    [role="tabpanel"] {
      padding: var(--tabpanel-padding);
      padding: clamp(0.5rem, 1.5vmax, 1.5rem);
      border: var(--border); 
      border-width: 2px;

       /* Experimental */
       /* padding-bottom: 0; */
    }

    .cards-container {
      display: grid;
      grid-template-columns: var(--cards-container-template);
      /* gap: clamp(1rem, 2vmax, 1.5rem); */
      gap: clamp(0.5rem, 1.5vmax, 1.5rem);
      /* gap: var(--cards-container-gap); */
      grid-auto-rows: auto;
      align-items: center;
    }

    /* .cards-container::after {
      content: '';
      grid-column: var(--grid-fix-template);
    } */

    /* .cards-container {
      display: flex;
      flex-wrap: wrap;
      gap: clamp(0.5rem, 2vmax, 2rem);
      justify-content: space-between;
    } */

    .cards-container > p {
      grid-column: var(--tabpanel-empty-grid-column);

      font-weight: var(--tabpanel-empty-fontweight);
    }

    .card  {
      /* width: min(100%, 190px); */
      /* width: clamp(190px, 20%, 320px); */
      container: card/inline-size;

      display: flex;
      gap: var(--card-gap);

      /* Make cards same size */
      height: 100%;
      padding: var(--card-padding);
      padding: clamp(0.5rem, 6.5%, 1.5rem);
      padding: min(5%, 22px);

      
      flex-direction: column;
      /* justify-content: space-between; */

      border: var(--borderWidth) solid var(--button-border);
    }

    /* .card:is(:only-child) {
      grid-column: 1 / 2;
    } */

    /* .card > div { */
      /* width: 100%; */
      /* padding: clamp(8px, 5%, 24px); */
      /* padding: 0; */

      
      /* gap: clamp(24px, 9.4cqw, 48px); */
      /* gap: 0; */
      /* gap: 8.4cqw; */

      

      /* Make cards same size */
      /* height: 100%; */
      
    /* } */

    .card > div:first-child {
      
      /* align-items: flex-start; */
      
      /* gap: clamp(8px, 4cqw, 16px); */
      /* gap: 0; */
      display: flex;
      gap: var(--card-phrase-gap);
      /* Make cards same size */

      flex: 2;
      flex-direction: column;
      justify-content: space-between;
    }

    .card > div:last-child {
      display: flex;
      gap: var(--card-check-gap);
    }

    footer {
      margin-bottom: var(--footer-margin-bottom);

      font-weight: var(--footer-font-weight);

      border-top: var(--border);
    }
  }

  @layer states {
    /* Not :focus-visible -> when focused on click, styles show only with :focus pseudo-class and don't show in :focus-visbile; used in tabs */
    :focus {
      outline: var(--outlineOnFocus) solid var(--background-color);
      box-shadow: 0 0 0 var(--shadowOnFocus) var(--button-border);
    }

    button:focus:not(.withIcon) {
      background-color: var(--button-background-activated);
      color: var(--button-color-activated);
    }

    button:hover {
      cursor: pointer;
    }

    button:hover:not(.withIcon) {
      background-color: var(--button-background-activated);
      color: var(--button-color-activated);
    }

    button.withIcon:hover {
      outline: var(--outlineOnFocus) solid var(--background-color);
      box-shadow: 0 0 0 var(--shadowOnFocus) var(--button-border);
    }

    a:hover, a:focus {
      outline: var(--outlineOnFocus) solid var(--background-color);
      box-shadow: 0 0 0 var(--shadowOnFocus) var(--button-border);
    }

    [role="tablist"] button:focus {
      background-color: var(--tab-background);
      color: var(--tab-color);
      /* border-bottom: var(--tab-bottom-border); */
      
      box-shadow: unset;
      outline: unset;
    }

    [role="tablist"] button:nth-child(2):focus {
      /* border-color: var(--colorSuccess); */
      color: var(--colorSuccess);
    }

    [role="tablist"] button:nth-child(3):focus {
      /* border-color: var(--colorError); */
      color: var(--colorError);
    }

    [role="tablist"] button:focus > span {
      outline: calc(2 / 16 * 1rem) solid var(--background-color);
      box-shadow: 0 0 0 calc(4 / 16 * 1rem) var(--button-border);
    }

    [role="tablist"] button:hover {
      background-color: var(--tab-background);
    }

    [role="tablist"] button:hover > span {
      background-color: var(--tab-background-hover);
      color: var(--tab-color-hover);
      /* colors for correct/wrong */
      outline: calc(2 / 16 * 1rem) solid var(--background-color);
      box-shadow: 0 0 0 calc(4 / 16 * 1rem) var(--button-border);
    }

    /* make vars like for correct buttons etc., no rewrite here*/
    [role="tablist"] button:nth-child(2):hover > span {
      background-color: var(--tab-correct-background-hover);
      color: var(--tab-correct-color-hover);
    }

    [role="tablist"] button:nth-child(2):focus > span {
      box-shadow: 0 0 0 calc(4 / 16 * 1rem) var(--colorSuccess);
    }

    [role="tablist"] button:nth-child(3):hover > span {
      background-color: var(--tab-wrong-background-hover);
      color: var(--tab-wrong-color-hover);
    }

    [role="tablist"] button:nth-child(3):focus > span {
      box-shadow: 0 0 0 calc(4 / 16 * 1rem) var(--colorError);
    }

    [role="tabpanel"]:focus {
      background-color: var(--tabpanel-background);
    }

    #tabpanel-1 {
      border-color: var(--colorSuccess);
    }

    #tabpanel-2 {
      border-color: var(--colorError);
    }

    .card:focus-within {
      outline: var(--outlineOnFocus) solid var(--background-color);
      box-shadow: 0 0 0 var(--shadowOnFocus) var(--button-border);
    }
    
    :disabled {
      background-color: var(--buttonDisabled-background);

      color: var(--buttonDisabled-text);
      border-color: var(--buttonDisabled-text);
    }
  }
}
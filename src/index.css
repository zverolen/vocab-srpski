@layer reset, tokens, general, specific, states, theme.light, theme.dark, overrides;

@import url("./styles/reset.css") layer(reset);
@import url("./styles/tokens.css") layer(tokens);
@import url("./styles/defaults.css") layer(general);


@layer overrides {
  /* Visually hidden elements are visible to screen readers */
  .visually-hidden {
    clip-path: inset(100%);
    clip: rect(1px, 1px, 1px, 1px);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }
}

@media (prefers-color-scheme: light) {
  @layer theme.light {
    :root {
      --text-color: var(--colorPrimary);
      --background-color: var(--colorPrimaryInverted);
      --disabled-background-color: var(--colorDisabledLight);
      --disabled-text-color: var(--colorDisabledMedium);

      --correct-text-color: var(--colorSuccessLightTheme);
      --correct-background-color: var(--background-color);
      --wrong-text-color: var(--colorErrorLightTheme);
      --wrong-background-color: var(--background-color);
    }
  }
}

@media (prefers-color-scheme: dark) {
  @layer theme.dark {
    :root {
      --text-color: var(--colorPrimaryInverted);
      --background-color: var(--colorPrimary);
      --disabled-background-color: var(--colorDisabledDark);
      --disabled-text-color: var(--colorDisabledMedium);

      --correct-text-color: var(--colorSuccessDarkTheme);
      --correct-background-color: var(--background-color);
      --wrong-text-color: var(--colorErrorDarkTheme);
      --wrong-background-color: var(--background-color);
    }
  }
}

@layer general {
  
    body {
      background-color: var(--background-color);
      color: var(--text-color);
    
      font-family: var(--text-font-family);
      font-size: var(--text-font-size);
      font-weight: var(--body-font-weight);
    }

    header, main, footer {
      width: var(--content-width);
      margin-inline: var(--content-margins);
      padding-inline: var(--landmark-padding-inline);
    }

    main {
      display: var(--main-display);
      flex-direction: var(--main-direction);

      margin-block-end: var(--main-margin-bottom);
    }

    ol {
      padding-left: var(--ordered-list-left-gap);
    }

    header {
      margin-block: var(--header-margin-block);
    }
    
    h1, h2, h3 {
      font-family: var(--heading-font-family);
    }

    h1 {
      margin-block-end: var(--title-margin-bottom);

      font-size: var(--title-font-size);
      text-align: var(--title-text-alignment);
      line-height: var(--title-line-height);
      text-transform: var(--heading-text-transform);
      letter-spacing: var(--heading-letter-spacing);
    }

    p:is(.card p) {
      font-size: var(--card-text-font-size);
    }

    p:where(:not(.card p)) {
      line-height: var(--text-line-height);
      font-weight: var(--text-font-weight);
    }

    h1 + p {
      width: var(--title-subheading-width);
      margin-inline: var(--title-subheading-margin);
    
      text-align: var(--subheading-text-alignment);
      line-height: var(--subheading-line-height);
      font-size: var(--title-subheading-text-size);
      
      text-wrap: var(--title-subheading-text-wrap);  
    }

    h2:is(.disclosure h2) {
      margin-inline-end: var(--disclosure-button-margin-bottom);
    }

    h2:is(footer h2) {
      margin-block: var(--footer-subheading-margin);

      font-size: var(--subheading-font-size);
      text-transform: var(--heading-text-transform);
      letter-spacing: var(--heading-letter-spacing);
    }

    button {
      min-width: var(--button-min-width);
      padding-inline: var(--button-padding-inline);
      padding-block: var(--button-padding-block);

      font-size: var(--control-font-size);

      /* COLORS */
      background-color: var(--background-color);
      border: var(--borderWidthPrimary) solid var(--text-color);
      color: var(--text-color);

      /* Animations */
      transition: var(--button-transition);
    }

    button.withIcon {
      padding-inline: var(--button-with-icon-inline-padding);
      border: var(--button-withIcon-border);

      font-family: var(--button-withIcon-font-family);
      font-size: var(--button-withIcon-font-size);
      text-decoration: var(--button-withIcon-text-decoration);
    }

    button.withIcon span {
      vertical-align: var(--button-with-icon-vertical-align);
    }

    button.withIcon[aria-expanded]:is(.disclosure button) span::after {
      content: '';
      width: var(--disclosure-control-icon-width);
      height: var(--disclosure-control-icon-height);
      margin-left: var(--disclosure-control-icon-gap);

      clip-path: var(--disclosure-control-icon-shape);
      transform: rotate(var(--disclosure-control-icon-flip));

      vertical-align: var(--button-with-icon-icon-vertical-align);

      /* COLOR */
      background-color: var(--text-color);

      /* Animations */
      transition: var(--disclosure-button-icon-transition);
    }

    button.withIcon[aria-expanded="true"]:is(.disclosure button) span::after {
      transform: var(--disclosure-button-icon-transform);
    }

    .instruction {
      margin-block: var(--instruction-margin-block);
    }

    .instruction li p:not(li:last-child p) {
      margin-block-end: var(--instruction-item-margin);
    }

    [role="tablist"] {
      container: tablist / inline-size;
    }

    button[role="tab"] {
      position: var(--tab-position);
      padding: var(--tab-padding);

      border-bottom: var(--tab-bottom-border);
    }

    button[role="tab"]:not(:first-child) {
      margin-inline-start: var(--tab-left-margin);
    }

    button[role="tab"]:not([aria-selected="true"]) {
      border-width: var(--tab-border);
    }

    button[role="tab"][aria-selected="true"] {
      padding-block-start: var(--tab-padding-current);
      border-width: var(--current-tab-border-width);
    }

    button[role="tab"][aria-selected="true"]::after {
      content: '';
      display: var(--tabpanel-concealer-display);

      position: var(--tab-concealer-position);
      left: var(--tab-concealer-left);
      bottom: var(--tab-concealer-bottom);
      z-index: var(--tab-concealer-z-index);

      width: var(--tab-concealer-width);
      height: var(--tab-concealer-height);
      
      background-color: var(--background-color);
    }

    button[role="tab"] > span {
      display: var(--tab-caption-layout);
      align-items: var(--tab-caption-centering);
      
      padding: var(--tab-caption-padding);

      /* Animations */
      transition: var(--tab-caption-transition);
    }

    button[role="tab"] > span > span:first-child {
      margin-right: var(--tab-icon-gap);
      font-size: var(--tab-icon-size);
      line-height: var(--tab-icon-line-height);
    }

    @container tablist (width < calc(430 / 16 * 1rem)) {
      button[role="tab"] > span >span:first-child {
        display: var(--hide-emoji);
      }
    }

    @container tablist (width < calc(330 / 16 * 1rem)) {
      button[role="tab"] > span {
        flex-direction: var(--tab-caption-direction-narrow-screen);
        
        flex-direction: column;
        align-items: flex-start;
      }
    }

    [role="tabpanel"] {
      padding: var(--tabpanel-padding);
      padding: clamp(0.5rem, 1.5vmax, 1.5rem);
      border: var(--borderWidthPrimary) solid var(--text-color);
      border-width: 2px;
      flex: 2;
    }

    .cards-container {
      display: grid;
      grid-template-columns: var(--cards-container-template);
      /* gap: clamp(1rem, 2vmax, 1.5rem); */
      gap: clamp(0.5rem, 1.5vmax, 1.5rem);
      /* gap: var(--cards-container-gap); */
      grid-auto-rows: auto;
      align-items: center;
    }

    .cards-container > p {
      grid-column: var(--tabpanel-empty-grid-column);
    }

    .card  {
      container: card/inline-size;

      display: flex;
      gap: var(--card-gap);

      /* Make cards same height */
      height: 100%;
      padding: var(--card-padding);
      padding: clamp(0.5rem, 6.5%, 1.5rem);
      padding: min(5%, 22px);

      
      flex-direction: column;
      /* justify-content: space-between; */

      border: var(--borderWidthPrimary) solid var(--text-color);
    }

    .card > div:first-child {
      
      /* align-items: flex-start; */
      
      /* gap: clamp(8px, 4cqw, 16px); */
      /* gap: 0; */
      display: flex;
      gap: var(--card-phrase-gap);
      /* Make cards same size */

      flex: 2;
      flex-direction: column;
      justify-content: space-between;
    }

    .card > div:last-child {
      display: flex;
      gap: var(--card-check-gap);
    }

    footer {
      margin-bottom: var(--footer-margin-bottom);

      border-top: var(--borderWidthPrimary) solid var(--text-color);
    }
}

@layer specific {
  /* New approach, experiment */
  button.correct {
    --accent-color: var(--correct-text-color);
  }

  button.wrong {
    --accent-color: var(--wrong-text-color);
  }

  button.correct:not(button[role="tab"]) {
    background-color: var(--correct-background-color);
    color: var(--correct-text-color);
    border-color: var(--correct-text-color);
  }

  button.correct[role="tab"][aria-selected="true"] {
    border-color: var(--correct-text-color);
  }

  .card.wrong:is(div) {
    border-color: var(--wrong-text-color);
  }

  button.wrong:not(button[role="tab"]) {
    background-color: var(--wrong-background-color);
    color: var(--wrong-text-color);
    border-color: var(--wrong-text-color);
  }

  button.wrong[role="tab"][aria-selected="true"] {
    border-color: var(--wrong-text-color);
  }

  button.updated {
    animation-duration: 1s;
    animation-name: updated;
    animation-iteration-count: 1;
  }
  


  @keyframes updated {
    0% {
      color: var(--text-color);
    }  

    50% {
      color: var(--disabled-background-color);
    }

    100% {
      color: var(--text-color);
    }
  } 

  #tabpanel-1 {
    border-color: var(--correct-text-color);
  }

  #tabpanel-2 {
    border-color: var(--wrong-text-color);
  }

  .card.correct:not(.card button) {
    border-color: var(--correct-text-color);
  }

  
}

@layer states {
  :focus-visible {
    outline: var(--outlineOnFocus) solid var(--background-color);
    box-shadow: 0 0 0 var(--shadowOnFocus) var(--text-color);
    
    /* Animations */
    transition: box-shadow 0.2s ease-out, outline 0.2s ease-out;
  }

  button:focus-visible:not(.withIcon):not([role="tab"]) {
   background-color: var(--text-color);
   color: var(--background-color);
  }

  button.correct:focus-visible:not([role="tab"]) {
    background-color: var(--correct-text-color);
    color: var(--correct-background-color);
    box-shadow: 0 0 0 var(--shadowOnFocus) var(--correct-text-color);
  }

  button.wrong:focus-visible:not([role="tab"]) {
    background-color: var(--wrong-text-color);
    color: var(--wrong-background-color);
    box-shadow: 0 0 0 var(--shadowOnFocus) var(--wrong-text-color);
  }

   button[role="tab"]:is(:focus, :focus-visible) {
    box-shadow: unset;
    outline: unset;
  }

  button[role="tab"].correct:focus {
    color: var(--correct-text-color);
  }

  button[role="tab"].wrong:focus {
    color: var(--wrong-text-color);
  }

  button[role="tab"]:focus > span {
    outline: calc(2 / 16 * 1rem) solid var(--background-color);
    box-shadow: 0 0 0 calc(4 / 16 * 1rem) var(--text-color);
  }

  button[role="tab"].correct:focus > span {
    box-shadow: 0 0 0 calc(4 / 16 * 1rem) var(--correct-text-color);
  }

  button[role="tab"].wrong:focus > span {
    box-shadow: 0 0 0 calc(4 / 16 * 1rem) var(--wrong-text-color);
  }

  [role="tabpanel"]:focus-visible {
    background-color: var(--background-color);
  }

  .card:focus-within {
    outline: var(--outlineOnFocus) solid var(--background-color);
    box-shadow: 0 0 0 var(--shadowOnFocus) var(--text-color);
  }

  .card.correct:focus-within {
    box-shadow: 0 0 0 var(--shadowOnFocus) var(--correct-text-color);
  }

  .card.wrong:focus-within {
    box-shadow: 0 0 0 var(--shadowOnFocus) var(--wrong-text-color);
  }

  a:hover, a:focus {
    outline: var(--outlineOnFocus) solid var(--background-color);
    box-shadow: 0 0 0 var(--shadowOnFocus) var(--text-color);
  }

  button:hover {
    cursor: pointer;

    /* Animations */
    transition: background-color 0.1s ease-out;
  }

  button:hover:not(.withIcon) {
    background-color: var(--text-color);
    color: var(--background-color);
  }

  button.withIcon:hover {
    outline: var(--outlineOnFocus) solid var(--background-color);
    box-shadow: 0 0 0 var(--shadowOnFocus) var(--text-color);
  }

  button.correct:not([role="tab"]):hover {
    background-color: var(--correct-text-color);
  }

  button.wrong:not([role="tab"]):hover {
    background-color: var(--wrong-text-color);
  }

  button[role="tab"]:hover {
    background-color: var(--background-color);
  }

  button[role="tab"]:hover > span {
    background-color: var(--text-color);
    color: var(--background-color);
    outline: calc(2 / 16 * 1rem) solid var(--background-color);
    box-shadow: 0 0 0 calc(4 / 16 * 1rem) var(--text-color);
  }

  button[role="tab"].correct:hover > span {
    background-color: var(--correct-text-color);
    color: var(--correct-background-color);
    box-shadow: 0 0 0 calc(4 / 16 * 1rem) var(--correct-text-color);
  }

  button[role="tab"].wrong:hover > span {
    background-color: var(--wrong-text-color);
    color: var(--wrong-background-color);
    box-shadow: 0 0 0 calc(4 / 16 * 1rem) var(--wrong-text-color);
  }
  
  :disabled {
    background-color: var(--disabled-background-color);

    color: var(--disabled-text-color);
    border-color: var(--disabled-text-color);
  }
}
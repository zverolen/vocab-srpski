@layer reset, tokens, general.defaults, general.states, specific, theme.light, theme.dark, overrides;

@import url("./styles/reset.css") layer(reset);
@import url("./styles/tokens.css") layer(tokens);
@import url("./styles/defaults.css") layer(general.defaults);


@layer overrides {
  /* Visually hidden elements are visible to screen readers */
  .visually-hidden {
    clip-path: inset(100%);
    clip: rect(1px, 1px, 1px, 1px);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }
}

@media (prefers-color-scheme: light) {
  @layer theme.light {
    :root {
      --text-color: var(--colorPrimary);
      --background-color: var(--colorPrimaryInverted);
      --disabled-background-color: var(--colorDisabledLight);
      
      --correct-text-color: var(--colorSuccess);
      --correct-background-color: var(--colorSuccessInverted);
      --wrong-text-color: var(--colorError);
      --wrong-background-color: var(--colorErrorInverted);
    }
  }
}

@media (prefers-color-scheme: dark) {
  @layer theme.dark {
    :root {
      --text-color: var(--colorPrimaryInverted);
      --background-color: var(--colorPrimary);
      --disabled-background-color: var(--colorDisabledDark);

      --correct-text-color: var(--colorSuccessInverted);
      --correct-background-color: var(--colorSuccess);
      --wrong-text-color: var(--colorErrorInverted);
      --wrong-background-color: var(--colorError);
    }
  }
}

@layer specific {
  .correct {
    --button-background: var(--correct-background-color);
    --button-border: var(--correct-text-color);
    --button-color: var(--correct-text-color);
    --button-background-activated: var(--correct-text-color);
    --button-color-activated: var(--correct-background-color);
  }

  .wrong {
    --button-background: var(--wrong-background-color);
    --button-border: var(--wrong-text-color);
    --button-color: var(--wrong-text-color);
    --button-background-activated: var(--wrong-text-color);
    --button-color-activated: var(--wrong-background-color);
  }
}

/* universal? */
@layer general {

  @layer defaults {
  
    body {
      background-color: var(--background-color);
      color: var(--text-color);
    
      font-family: var(--text-font);
      font-size: var(--text-font-size);
      font-weight: var(--body-font-weight);
    }
    
    h1, h2, h3 {
      font-family: var(--heading-font);
    }

    h1 {
      text-align: center;
    }

    p {
      line-height: var(--text-line-height);
      font-size: clamp(18px, 7.2cqw, 22px);
    }

    h1 + p {
      text-align: center;
    }

    h2:is(footer h2) {
      font-size: var(--subheading-font-size);
      /*abstraction makes no sense*/
      text-transform: var(--subheading-text-transform);
    }
    
    button {
      padding: var(--button-padding-vert) var(--button-padding-horiz);
  
      background-color: var(--button-background);
      border: var(--borderWidth) solid var(--button-border);
      color: var(--button-color);
  
      font-size: var(--control-font-size);
    }
  
    button:hover {
      background-color: var(--button-background-activated);
      color: var(--button-color-activated);

      cursor: pointer;
    }

    button.withIcon {
      border: var(--button-withIcon-border);

      font-family: var(--button-withIcon-font);
      font-size: var(--button-withIcon-font-size);
      text-decoration: var(--button-withIcon-text-decoration);
    }

    button.withIcon[aria-expanded] span::after {
      content: '';
      width: var(--disclosure-control-icon-width);
      height: var(--disclosure-control-icon-height);
      background-color: var(--disclosure-control-icon-background);
      clip-path: var(--disclosure-control-icon-shape);
      transform: rotate(var(--disclosure-control-icon-flip));
    }

    button.withIcon[aria-expanded="true"] span::after {
      transform: rotate(var(--disclosure-control-icon-unflip));
    }

    footer {
      font-weight: var(--footer-font-weight);
      border-top: var(--border);
    }

    .siteFrame {
      width: var(--content-width);
      margin-inline: var(--content-margins);
    }

    .instruction li {
      font-weight: var(--instruction-font-weight);
    }

    [role="tablist"] button {
      border-bottom: var(--tab-bottom-border);
      position: var(--tab-position);
    }

    [role="tablist"] button:not(:first-child) {
      margin-inline-start: var(--tab-left-margin);
    }

    [role="tablist"] button[aria-selected="true"] {
      padding-top: var(--current-tab-gap);
    }

    [role="tablist"] button[aria-selected="true"]::after {
      content: '';
      display: var(--tabpanel-concealer-display);

      position: var(--tab-concealer-position);
      left: var(--tab-concealer-left);
      bottom: var(--tab-concealer-bottom);

      width: var(--tab-concealer-width);
      height: var(--tab-concealer-height);
      
      background-color: var(--tab-concealer-background);
    }

    [role="tablist"] button > span {
      display: flex;
      align-items: center;
    }

    [role="tablist"] button[aria-selected="true"] > span {
      border-top: var(--border);
    }

    [role="tablist"] button > span >span:first-child {
      font-size: var(--tab-icon-size);
      line-height: var(--tab-icon-line-height);
    }

    [role="tabpanel"] {
      border: var(--border); 
    }

    .cards-container {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(min(100%, 270px), 1fr));
      /* gap: clamp(1rem, 2vmax, 1.5rem); */
      gap: 0;
      grid-auto-rows: auto;
      align-items: center;
    }

    .card  {
      container: card/inline-size;
      /* Make cards same size */
      height: 100%;
    }

    .card > div {
      width: 100%;
      /* padding: clamp(8px, 5%, 24px); */
      padding: 0;

      
      /* gap: clamp(24px, 9.4cqw, 48px); */
      /* gap: 0; */
      /* gap: 8.4cqw; */

      border: var(--border);

      /* Make cards same size */
      height: 100%;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }

    .card > div > div:first-child {
      
      /* align-items: flex-start; */
      
      /* gap: clamp(8px, 4cqw, 16px); */
      /* gap: 0; */
      /* Make cards same size */
      display: flex;
      flex: 2;
      flex-direction: column;
      justify-content: space-between;
    }

    .card > div > div:last-child {
      /* display: flex; */
      /* gap: 0; */
    }
  }

  @layer states {
    /* Not :focus-visible -> when focused on click, styles show only with :focus pseudo-class and don't show in :focus-visbile; used in tabs */
    :focus {
      outline: var(--outlineOnFocus) solid var(--background-color);
      box-shadow: 0 0 0 var(--shadowOnFocus) var(--button-border);
    }

    button:focus {
      background-color: var(--button-background-activated);
      color: var(--button-color-activated);
    }

    [role="tablist"] button:focus {
      background-color: var(--tab-background);
      color: var(--tab-color);
      border-bottom: var(--tab-bottom-border);
      /*Temporary removed*/
      box-shadow: unset;
      outline: unset;
    }

    [role="tablist"] button:hover {
      background-color: var(--tab-background);
    }

    [role="tablist"] button:hover > span {
      background-color: var(--tab-background-hover);
      color: var(--tab-color-hover)
    }

    [role="tablist"] button:nth-child(2):hover > span {
      background-color: var(--tab-correct-background-hover);
      color: var(--tab-correct-color-hover);
    }

    [role="tablist"] button:nth-child(3):hover > span {
      background-color: var(--tab-wrong-background-hover);
      color: var(--tab-wrong-color-hover);
    }

    [role="tabpanel"]:focus {
      background-color: var(--tabpanel-background);
    }
    
    :disabled {
      background-color: var(--buttonDisabled-background);

      color: var(--buttonDisabled-text);
      border-color: var(--buttonDisabled-text);
    }
  }
}



 /* @font-face {
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 400;
  src: url('./assets/fonts/nunito/nunito-variable.ttf');
}

@font-face {
  font-family: 'Literata';
  font-style: normal;
  font-weight: 600;
  src: url('./assets/fonts/literata/literata_variable.ttf');
}

:root {
  --color-base: hsl(0 0% 0% / 87%);
  --color-humble: hsl(0 0% 0% / 40%);
  --color-secondary: hsl(0 0% 100%);
  --color-correct: hsl(140 24% 32%);
  --color-wrong: hsl(0 43% 45%);
  --color-correctHumble: hsl(140 50% 93%);
  --color-wrongHumble: hsl(0 50% 93%);

  --font-size-primary: 1.125rem;
  --font-size-button: 1rem;
  --font-size-toggle: 0.875rem;
  --font-primary: 'Nunito';
  --font-secondary: 'Literata';

  --border-default: 0.0625rem solid var(--color-base);
  --outline-on-focus: 0.38rem solid var(--color-secondary);
  --boxshadow-on-focus-default: 0 0 0 0.5rem var(--color-base);
  --boxshadow-on-focus-correct: 0 0 0 0.5rem var(--color-correct);
  --boxshadow-on-focus-wrong: 0 0 0 0.5rem var(--color-wrong);

  --site-frame: clamp(16.875rem, 93%, 69rem);
}

:focus-visible {
  outline: 0.38rem solid var(--color-secondary);
  box-shadow: 0 0 0 0.5rem var(--color-base);
  background-color: var(--color-secondary);
}

:focus {
  outline: 0.38rem solid var(--color-secondary);
  box-shadow: 0 0 0 0.5rem var(--color-base);
  background-color: var(--color-secondary);
}

:disabled {
  --color-base: var(--color-humble) !important;
}  */

/* body {
  font-family: var(--font-primary), sans-serif;
  color: var(--color-base);

  font-size: var(--font-size-primary);
  background-color: var(--background-color);
}

h1 {
  margin-block: 1em;

  font-family: var(--font-secondary), serif;
  font-size: clamp(1.25rem, 4vw, 3rem);
  text-align: center;
  text-transform: uppercase;
}

h3 {  
  font-weight: 400;
  font-size: inherit;
}

hr {
  width: 100%;
  
  color: var(--color-humble);
}

ol {
  margin-block-end: 1.5em;
}

button {
  padding: 0;

  border-radius: 0;
  border: none;

  color: var(--color-base);
  background-color: var(--color-secondary);
  font-size: 1rem;
}

button.correct {
  --color-base: var(--color-correct);
}

button.wrong {
  --color-base: var(--color-wrong);
}

button.correct:focus-visible {
  box-shadow: var(--boxshadow-on-focus-correct);
}

button.wrong:focus-visible {
  box-shadow: var(--boxshadow-on-focus-wrong);
}

header {
  width: 100%;
  margin-block-end: 0.5rem;
  padding: 1rem 0;

  border-bottom: var(--border-default);
  background-color: var(--color-secondary);
}

header > div {
  display: flex;
  justify-content: flex-start;

  width: var(--site-frame);
  margin-inline: auto;
}

header > div > div {
  width: 100%;
  
  display: flex;
  flex-direction: column;
}

div:has( > button:not(:has(svg))):has( > div svg) {
  display: flex;
  justify-content: space-between;
  align-items: center;

  width: 100%;
}

header button {
  margin-inline-start: auto;
} */

/* Fallback for Firefox */
/* div:is(.correct, .wrong) > h3 + div {
  display: flex;
  justify-content: space-between;
  align-items: center;

  width: 100%;
}

.content {
  width: var(--site-frame);
  margin-inline: auto;

  border: var(--border-default);
} */
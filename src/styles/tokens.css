/* Colors are in hex format because no color manipulations are used at this point */

:root {
  /* primitive */

  /* Colors */
  --black: #212121;
  --white: #FFFFFF;
  --redDark: #80313F;
  --redLight: #FCF5F6;
  --greenDark: #33544F;
  --greenLight: #F2FCFB;
  --greyLight: #EBEBEB;
  --greyMedium: #858585;
  --greyDark: #333333;

  --inheritedColor: currentcolor;

  /* Sizing */
  --borderWidth: calc(1 / 16 * 1rem);
  --outlineOnFocus: calc(6 / 16 * 1rem);
  --shadowOnFocus: calc(8 / 16 * 1rem);

  --siteWidthMin: calc(280 / 16 * 1rem);
  --siteWidthMax: calc(1352 / 16 * 1rem);
  --siteWidthIdeal: 94%;
  /* --paddingButtonHoriz: 1.125em;
  --paddingButtonVert: 0.875em; */
  --paddingButtonHoriz: 0;
  --paddingButtonVert: 0;
  
  --fullWidth: 100%;

  --cardWidthMin: calc(190 / 16 * 1rem);

  --concealer-height: calc(2 / 16 * 1rem);

  --marginCentering: auto;
  --marginCorrection-I: calc(-1 / 16 * 1rem);

  --textMin: calc(18 / 16 * 1rem);
  --textMax: calc(22 / 16 * 1rem);
  --textIdeal: calc(22 / 1512 * 100 * 1vw);
  --controlMin: 1rem;
  --controlMax: calc(18 / 16 * 1rem);
  --controlIdeal: calc(18 / 1512 * 100 * 1vw);
  --emojiMax: calc(24 / 16 * 1rem);

  --lineHeightBig: 1.5;
  --lineHeightEmoji: 1;
  --lineHeightReset: normal;

  --fontWeightMin: 400;
  --fontWeightMax: 600;

  --gap-I: calc(8 / 16 * 1rem);
  --gap-II: 1rem;
  --gap-III: calc(24 / 16 * 1rem);
  --gap-IV: calc(32 /  16 * 1rem);
  --gap-V: calc(48 / 16 * 1rem);

  --iconTriangleWidth: calc(14 / 16 * 1rem);
  --iconTriangleHeight: calc(12 / 16 * 1rem);

  --wordLengthMin: 5ch;

  /* Fonts */
  --sans-I: 'Trebuchet MS';
  --sans-II: Verdana;
  --sans-III: Arial;
  --sans-IV: Tahoma;
  --serif-I: Georgia;
  --serif-II: 'Times New Roman';

  --underlinedNoBorder: underline;

  /* Degrees */
  --turnUpSideDown: 180deg;
  --turnReset: 0deg;

  /* Position */
  --positionInFlow: relative;
  --positionOutOfFlow: absolute;

  --shiftDownConcealer: calc(-2 / 16 * 1rem);
  --shiftLeftConcealer: 0;

  /* Layers */
  --layerLower-I: -1;
  --layerHigher-I: 1;

  /* Grid */
  --first-three-columns: 1 / 3;

  /* Resets */
  --reset: none;

  /* Semantic */
  --colorPrimary: var(--black);
  --colorSecondary: var(--white);
  --colorPrimaryInverted: var(--colorSecondary);

  --colorDisabledLight: var(--greyLight);
  --colorDisabledDark: var(--greyDark);
  --colorDisabledMedium: var(--greyMedium);

  --colorSuccess: var(--greenDark);
  --colorSuccessInverted: var(--greenLight);
  --colorError: var(--redDark);
  --colorErrorInverted: var(--redLight);

  --clipPathTriangle: polygon(50% 0, 100% 100%, 0 100%);
}